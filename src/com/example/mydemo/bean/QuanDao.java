package com.example.mydemo.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.mydemo.bean.Quan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUAN.
*/
public class QuanDao extends AbstractDao<Quan, Long> {

    public static final String TABLENAME = "QUAN";

    /**
     * Properties of entity Quan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Name_mon = new Property(2, String.class, "name_mon", false, "NAME_MON");
        public final static Property Gia = new Property(3, int.class, "gia", false, "GIA");
        public final static Property Diachi = new Property(4, String.class, "diachi", false, "DIACHI");
        public final static Property Img_mon = new Property(5, String.class, "img_mon", false, "IMG_MON");
        public final static Property Lat = new Property(6, Integer.class, "lat", false, "LAT");
        public final static Property Lon = new Property(7, Integer.class, "lon", false, "LON");
        public final static Property Like = new Property(8, Integer.class, "like", false, "LIKE");
        public final static Property Unlike = new Property(9, Integer.class, "unlike", false, "UNLIKE");
        public final static Property Hienthi = new Property(10, Integer.class, "hienthi", false, "HIENTHI");
        public final static Property Sdt = new Property(11, Integer.class, "sdt", false, "SDT");
        public final static Property Oder = new Property(12, Integer.class, "oder", false, "ODER");
        public final static Property Den = new Property(13, Integer.class, "den", false, "DEN");
    };


    public QuanDao(DaoConfig config) {
        super(config);
    }
    
    public QuanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUAN' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'NAME_MON' TEXT NOT NULL ," + // 2: name_mon
                "'GIA' INTEGER NOT NULL ," + // 3: gia
                "'DIACHI' TEXT NOT NULL ," + // 4: diachi
                "'IMG_MON' TEXT NOT NULL ," + // 5: img_mon
                "'LAT' INTEGER," + // 6: lat
                "'LON' INTEGER," + // 7: lon
                "'LIKE' INTEGER," + // 8: like
                "'UNLIKE' INTEGER," + // 9: unlike
                "'HIENTHI' INTEGER," + // 10: hienthi
                "'SDT' INTEGER," + // 11: sdt
                "'ODER' INTEGER," + // 12: oder
                "'DEN' INTEGER);"); // 13: den
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Quan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getName_mon());
        stmt.bindLong(4, entity.getGia());
        stmt.bindString(5, entity.getDiachi());
        stmt.bindString(6, entity.getImg_mon());
 
        Integer lat = entity.getLat();
        if (lat != null) {
            stmt.bindLong(7, lat);
        }
 
        Integer lon = entity.getLon();
        if (lon != null) {
            stmt.bindLong(8, lon);
        }
 
        Integer like = entity.getLike();
        if (like != null) {
            stmt.bindLong(9, like);
        }
 
        Integer unlike = entity.getUnlike();
        if (unlike != null) {
            stmt.bindLong(10, unlike);
        }
 
        Integer hienthi = entity.getHienthi();
        if (hienthi != null) {
            stmt.bindLong(11, hienthi);
        }
 
        Integer sdt = entity.getSdt();
        if (sdt != null) {
            stmt.bindLong(12, sdt);
        }
 
        Integer oder = entity.getOder();
        if (oder != null) {
            stmt.bindLong(13, oder);
        }
 
        Integer den = entity.getDen();
        if (den != null) {
            stmt.bindLong(14, den);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Quan readEntity(Cursor cursor, int offset) {
        Quan entity = new Quan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // name_mon
            cursor.getInt(offset + 3), // gia
            cursor.getString(offset + 4), // diachi
            cursor.getString(offset + 5), // img_mon
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // lon
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // like
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // unlike
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // hienthi
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // sdt
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // oder
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // den
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Quan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setName_mon(cursor.getString(offset + 2));
        entity.setGia(cursor.getInt(offset + 3));
        entity.setDiachi(cursor.getString(offset + 4));
        entity.setImg_mon(cursor.getString(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLon(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLike(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUnlike(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setHienthi(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSdt(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOder(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDen(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Quan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Quan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
